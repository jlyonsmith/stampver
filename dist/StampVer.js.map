{"version":3,"sources":["../src/StampVer.js"],"names":["StampVer","constructor","log","run","bind","findVersionFile","dir","process","cwd","length","filename","join","existsSync","substring","lastIndexOf","getFullDate","now","year","month","date","getJDate","startYear","toString","replaceTags","str","tags","tagPrefix","tagSuffix","i","tagEnd","tagStart","key","tag","argv","options","string","boolean","alias","default","args","help","info","version","versionFn","existSync","error","resolve","data","json5","promisify","readFile","encoding","parse","message","tz","newMajorMinorPatch","increment","build","major","minor","patch","buildFormat","revision","Object","entries","forEach","arr","versionDirname","dirname","update","filenames","match","fullFilename","fileType","fileTypes","glob","write","writeFile","updates","content","found","replace","search","warning","name","stringify"],"mappings":"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","file":"StampVer.js","sourcesContent":["import parseArgs from 'minimist'\nimport fs from 'fs'\nimport path from 'path'\nimport JSON5 from 'json5'\nimport { fullVersion } from './version'\nimport XRegExp from 'xregexp'\nimport minimatch from 'minimatch'\nimport util from 'util'\nimport moment from 'moment-timezone'\n\nexport class StampVer {\n  constructor(log) {\n    this.log = log\n    this.run = this.run.bind(this)\n  }\n\n  findVersionFile() {\n    let dir = process.cwd()\n\n    while (dir.length !== 0) {\n      const filename = path.join(dir, 'version.json5')\n\n      if (fs.existsSync(filename)) {\n        return filename\n      } else {\n        dir = dir.substring(0, dir.lastIndexOf('/'))\n      }\n    }\n\n    return null\n  }\n\n  static getFullDate(now) {\n    return now.year() * 10000 + (now.month() + 1) * 100 + now.date()\n  }\n\n  static getJDate(now, startYear) {\n    return (((now.year() - startYear + 1) * 10000) + (now.month() * 100) + now.date()).toString()\n  }\n\n  static replaceTags(str, tags) {\n    const tagPrefix = '${'\n    const tagSuffix = '}'\n\n    for (let i = str.length - 1; i != -1; ) {\n      const tagEnd = str.lastIndexOf(tagSuffix, i)\n\n      if (tagEnd <= 0) {\n          break\n      }\n\n      const tagStart = str.lastIndexOf(tagPrefix, tagEnd - 1)\n\n      if (tagStart < 0) {\n          break\n      }\n\n      const key = str.substring(tagStart + tagPrefix.length, tagEnd)\n      const tag = tags[key]\n\n      if (typeof tag !== 'undefined') {\n        str = str.substring(0, tagStart) + tag + str.substring(tagEnd + tagSuffix.length)\n      }\n\n      i = tagStart - 1\n    }\n    return str\n  }\n\n  async run(argv) {\n    const options = {\n      string: [ 'increment' ],\n      boolean: [ 'help', 'version', 'update' ],\n      alias: {\n        'u': 'update',\n        'i': 'increment'\n      },\n      default: {\n        'increment': 'none'\n      }\n    }\n    let args = parseArgs(argv, options)\n\n    if (args.help) {\n      this.log.info(`\nVersion stamper\n\nUsage: stampver [-u] [<version-file>]\n\n<version-file> defaults to 'version.json5'.\n\nWill increment the build and/or revision number and search/replace all other version\nrelated information in a list of files.\n\nSearches for a 'version.json5' file in the current and parent directories and uses\nthat as the root directory for project files. See https://github.com/jlyonsmith/stampver\nfor the format of the version.json5 file.\n\n-u, --update            Actually do the file updates. Defaults to just reporting changes.\n-i, --increment <part>  Also increment one of major, minor or patch parts of version.\n                        Defaults to none.  Updating major will reset minor and patch to zero,\n                        updating minor will just reset patch.\n--help                  Displays this help\n--version               Displays tool version\n`)\n      return 0\n    }\n\n    if (args.version) {\n      this.log.info(`v${fullVersion}`)\n      return 0\n    }\n\n    let versionFn = (args['_'].length > 0 ? args['_'][0] : null)\n\n    if (versionFn && !fs.existSync(versionFn)) {\n      this.log.error(`Unable to find file '${versionFn}'`)\n      return -1\n    }\n\n    versionFn = this.findVersionFile()\n\n    if (!versionFn) {\n      this.log.error(`Unable to find version.json5 file in this or parent directories`)\n      return -1\n    }\n\n    versionFn = path.resolve(versionFn)\n\n    if (this.versionFn && !fs.existsSync(this.versionFn)) {\n      this.log.error(`File '${this.versionFn}' does not exist`)\n      return -1\n    }\n\n    this.log.info(`Version file is '${versionFn}''`)\n\n    let data = null\n    try {\n      const json5 = await util.promisify(fs.readFile)(versionFn, { encoding: 'utf8' })\n      data = JSON5.parse(json5)\n    } catch (error) {\n      this.log.error(`'${versionFn}': ${error.message}`)\n      return -1\n    }\n\n    const now = moment.tz(moment(), data.tz)\n    const newMajorMinorPatch = (args.increment !== 'none')\n    let build\n\n    if (newMajorMinorPatch) {\n      switch (args.increment) {\n        case 'major':\n          data.tags.major += 1\n          data.tags.minor = 0\n          data.tags.patch = 0\n          break\n        case 'minor':\n          data.tags.minor += 1\n          data.tags.patch = 0\n          break\n        case 'patch':\n          data.tags.patch += 1\n          break\n      }\n    }\n\n    switch (data.buildFormat) {\n      case 'jdate':\n        build = StampVer.getJDate(now, data.startYear)\n\n        if (newMajorMinorPatch || data.tags.build !== build) {\n          data.tags.build = build\n          data.tags.revision = 0\n        } else {\n          data.tags.revision += 1\n        }\n        break\n\n      case 'full':\n        build = StampVer.getFullDate(now)\n\n        if (newMajorMinorPatch || data.tags.build !== build) {\n          data.tags.build = build\n          data.tags.revision = 0\n        } else {\n          data.tags.revision += 1\n        }\n        break\n\n      case 'incr':\n        if (newMajorMinorPatch) {\n           data.tags.build = 0\n        } else {\n          data.tags.build += 1\n        }\n        data.tags = revision = 0\n        break\n\n      default:\n        this.log.error(`Unknown build number format ${data.buildFormat}. Must be 'jdate', 'full' or 'incr'`)\n        return -1\n    }\n\n    this.log.info('Tags are:')\n\n    Object.entries(data.tags).forEach(arr => {\n      this.log.info(`  ${arr[0]}='${arr[1]}'`)\n    })\n\n    const versionDirname = path.dirname(versionFn)\n\n    this.log.info(`${args.update ? 'Updating' : 'Checking'} file list:`)\n\n    for (let filename of data.filenames) {\n      let match = false\n      const fullFilename = path.resolve(path.join(versionDirname, filename))\n\n      this.log.info(`  ${fullFilename}`)\n\n      for (let fileType of data.fileTypes) {\n        if (!minimatch(filename, fileType.glob)) {\n          continue\n        }\n\n        match = true\n\n        if (fileType.write) {\n          const dirname = path.dirname(fullFilename)\n\n          if (!fs.existsSync(dirname)) {\n            this.log.error(`Directory '${dirname}' does not exist`)\n            return -1\n          }\n\n          if (args.update) {\n            await util.promisify(fs.writeFile)(filename, StampVer.replaceTags(fileType.write, data.tags))\n          }\n        } else {\n          if (fs.existsSync(fullFilename)) {\n            const updates = fileType.updates || [ fileType.update ]\n            let content = await util.promisify(fs.readFile)(fullFilename, { encoding: 'utf8' })\n\n            updates.forEach(update => {\n              let found = false\n              let replace = StampVer.replaceTags(update.replace, data.tags)\n              let search = new XRegExp(update.search, 'm')\n              content = XRegExp.replace(content, search, (match) => {\n                found = true\n                return StampVer.replaceTags(replace, match)\n              }, 'one')\n\n              if (!found) {\n                this.log.warning(`File type '${fileType.name}' update '${update.search}' did not match anything`)\n              }\n            })\n\n            if (args.update) {\n              await util.promisify(fs.writeFile)(fullFilename, content)\n            }\n          } else {\n            this.log.error(`File '${fullFilename}' does not exist to update`)\n            return -1\n          }\n        }\n\n        if (match) {\n          break\n        }\n      }\n\n      if (!match) {\n        this.log.error(`File '${fullFilename}' has no matching file type`)\n        continue\n      }\n    }\n\n    if (args.update) {\n      await util.promisify(fs.writeFile)(versionFn, JSON5.stringify(data, null, '  '))\n    }\n\n    return 0\n  }\n}\n"]}