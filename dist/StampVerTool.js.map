{"version":3,"sources":["../src/StampVerTool.js"],"names":["StampVerTool","constructor","log","run","bind","findVersionFile","dir","process","cwd","length","filename","join","existsSync","substring","lastIndexOf","getFullDate","now","year","month","date","getJDate","startYear","toString","replaceTags","str","tags","tagPrefix","tagSuffix","i","tagEnd","tagStart","key","tag","argv","options","string","boolean","alias","u","s","default","increment","args","help","info","version","versionFn","existSync","error","resolve","data","json5","promisify","readFile","encoding","parse","message","tz","warning","newMajorMinorPatch","build","major","minor","patch","sequence","buildFormat","revision","Object","entries","forEach","arr","versionDirname","dirname","update","filenames","match","fullFilename","fileType","fileTypes","glob","dot","write","writeFile","updates","content","found","replace","search","name","stringify"],"mappings":"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","file":"StampVerTool.js","sourcesContent":["import parseArgs from \"minimist\"\nimport fs from \"fs\"\nimport path from \"path\"\nimport JSON5 from \"json5\"\nimport { fullVersion } from \"./version\"\nimport XRegExp from \"xregexp\"\nimport minimatch from \"minimatch\"\nimport util from \"util\"\nimport moment from \"moment-timezone\"\n\nexport class StampVerTool {\n  constructor(log) {\n    this.log = log\n    this.run = this.run.bind(this)\n  }\n\n  findVersionFile() {\n    let dir = process.cwd()\n\n    while (dir.length !== 0) {\n      const filename = path.join(dir, \"version.json5\")\n\n      if (fs.existsSync(filename)) {\n        return filename\n      } else {\n        dir = dir.substring(0, dir.lastIndexOf(\"/\"))\n      }\n    }\n\n    return null\n  }\n\n  static getFullDate(now) {\n    return now.year() * 10000 + (now.month() + 1) * 100 + now.date()\n  }\n\n  static getJDate(now, startYear) {\n    return (\n      (now.year() - startYear + 1) * 10000 +\n      now.month() * 100 +\n      now.date()\n    ).toString()\n  }\n\n  static replaceTags(str, tags) {\n    const tagPrefix = \"${\"\n    const tagSuffix = \"}\"\n\n    for (let i = str.length - 1; i != -1; ) {\n      const tagEnd = str.lastIndexOf(tagSuffix, i)\n\n      if (tagEnd <= 0) {\n        break\n      }\n\n      const tagStart = str.lastIndexOf(tagPrefix, tagEnd - 1)\n\n      if (tagStart < 0) {\n        break\n      }\n\n      const key = str.substring(tagStart + tagPrefix.length, tagEnd)\n      const tag = tags[key]\n\n      if (typeof tag !== \"undefined\") {\n        str =\n          str.substring(0, tagStart) +\n          tag +\n          str.substring(tagEnd + tagSuffix.length)\n      }\n\n      i = tagStart - 1\n    }\n    return str\n  }\n\n  async run(argv) {\n    const options = {\n      string: [\"increment\"],\n      boolean: [\"help\", \"version\", \"update\", \"sequence\"],\n      alias: {\n        u: \"update\",\n        i: \"increment\",\n        s: \"sequence\",\n      },\n      default: {\n        increment: \"none\",\n      },\n    }\n    let args = parseArgs(argv, options)\n\n    if (args.help) {\n      this.log.info(`\nVersion stamper\n\nUsage: stampver [-u] [<version-file>]\n\n<version-file> defaults to 'version.json5'.\n\nWill increment the build and/or revision number and search/replace all other version\nrelated information in a list of files.\n\nSearches for a 'version.json5' file in the current and parent directories and uses\nthat as the root directory for project files. See https://github.com/jlyonsmith/stampver\nfor the format of the version.json5 file.\n\n-u, --update            Actually do the file updates. Defaults to just reporting changes.\n-i, --increment <part>  Also increment one of major, minor or patch parts of version.\n                        Defaults to none.  Updating major will reset minor and patch to zero,\n                        updating minor will just reset patch.\n-s, --sequence          Increment the sequence number. Just a monotonically increasing\n                        number.\n--help                  Displays this help\n--version               Displays tool version\n`)\n      return 0\n    }\n\n    if (args.version) {\n      this.log.info(`v${fullVersion}`)\n      return 0\n    }\n\n    let versionFn = args[\"_\"].length > 0 ? args[\"_\"][0] : null\n\n    if (versionFn && !fs.existSync(versionFn)) {\n      this.log.error(`Unable to find file '${versionFn}'`)\n      return -1\n    }\n\n    versionFn = this.findVersionFile()\n\n    if (!versionFn) {\n      this.log.error(\n        `Unable to find version.json5 file in this or parent directories`\n      )\n      return -1\n    }\n\n    versionFn = path.resolve(versionFn)\n\n    if (this.versionFn && !fs.existsSync(this.versionFn)) {\n      this.log.error(`File '${this.versionFn}' does not exist`)\n      return -1\n    }\n\n    this.log.info(`Version file is '${versionFn}''`)\n\n    let data = null\n    try {\n      const json5 = await util.promisify(fs.readFile)(versionFn, {\n        encoding: \"utf8\",\n      })\n      data = JSON5.parse(json5)\n    } catch (error) {\n      this.log.error(`'${versionFn}': ${error.message}`)\n      return -1\n    }\n\n    let now = null\n    if (data.tags.tz) {\n      now = moment().tz(data.tags.tz)\n    } else {\n      this.log.warning(\"No 'tz' value set - using local time zone\")\n      now = moment()\n    }\n    const newMajorMinorPatch = args.increment !== \"none\"\n    let build\n\n    if (newMajorMinorPatch) {\n      switch (args.increment) {\n        case \"major\":\n          data.tags.major += 1\n          data.tags.minor = 0\n          data.tags.patch = 0\n          break\n        case \"minor\":\n          data.tags.minor += 1\n          data.tags.patch = 0\n          break\n        case \"patch\":\n          data.tags.patch += 1\n          break\n      }\n    }\n\n    if (args.sequence) {\n      let sequence = data.tags.sequence || 0\n\n      sequence += 1\n      data.tags.sequence = sequence\n    }\n\n    switch (data.buildFormat) {\n      case \"jdate\":\n        build = StampVerTool.getJDate(now, data.startYear)\n\n        if (newMajorMinorPatch || data.tags.build !== build) {\n          data.tags.build = build\n          data.tags.revision = 0\n        } else {\n          data.tags.revision += 1\n        }\n        break\n\n      case \"full\":\n        build = StampVerTool.getFullDate(now)\n\n        if (newMajorMinorPatch || data.tags.build !== build) {\n          data.tags.build = build\n          data.tags.revision = 0\n        } else {\n          data.tags.revision += 1\n        }\n        break\n\n      case \"incr\":\n        if (newMajorMinorPatch) {\n          data.tags.build = 0\n        } else {\n          data.tags.build += 1\n        }\n        data.tags = revision = 0\n        break\n\n      default:\n        this.log.error(\n          `Unknown build number format ${\n            data.buildFormat\n          }. Must be 'jdate', 'full' or 'incr'`\n        )\n        return -1\n    }\n\n    this.log.info(\"Tags are:\")\n\n    Object.entries(data.tags).forEach((arr) => {\n      this.log.info(`  ${arr[0]}='${arr[1]}'`)\n    })\n\n    const versionDirname = path.dirname(versionFn)\n\n    this.log.info(`${args.update ? \"Updating\" : \"Checking\"} file list:`)\n\n    for (let filename of data.filenames) {\n      let match = false\n      const fullFilename = path.resolve(path.join(versionDirname, filename))\n\n      this.log.info(`  ${fullFilename}`)\n\n      for (let fileType of data.fileTypes) {\n        if (!minimatch(filename, fileType.glob, { dot: true })) {\n          continue\n        }\n\n        match = true\n\n        if (fileType.write) {\n          const dirname = path.dirname(fullFilename)\n\n          if (!fs.existsSync(dirname)) {\n            this.log.error(`Directory '${dirname}' does not exist`)\n            return -1\n          }\n\n          if (args.update) {\n            await util.promisify(fs.writeFile)(\n              filename,\n              StampVerTool.replaceTags(fileType.write, data.tags)\n            )\n          }\n        } else {\n          if (fs.existsSync(fullFilename)) {\n            const updates = fileType.updates || [fileType.update]\n            let content = await util.promisify(fs.readFile)(fullFilename, {\n              encoding: \"utf8\",\n            })\n\n            updates.forEach((update) => {\n              let found = false\n              let replace = StampVerTool.replaceTags(update.replace, data.tags)\n              let search = new XRegExp(update.search, \"m\")\n              content = XRegExp.replace(\n                content,\n                search,\n                (match) => {\n                  found = true\n                  return StampVerTool.replaceTags(replace, match)\n                },\n                \"one\"\n              )\n\n              if (!found) {\n                this.log.warning(\n                  `File type '${fileType.name}' update '${\n                    update.search\n                  }' did not match anything`\n                )\n              }\n            })\n\n            if (args.update) {\n              await util.promisify(fs.writeFile)(fullFilename, content)\n            }\n          } else {\n            this.log.error(`File '${fullFilename}' does not exist to update`)\n            return -1\n          }\n        }\n\n        if (match) {\n          break\n        }\n      }\n\n      if (!match) {\n        this.log.error(`File '${fullFilename}' has no matching file type`)\n        continue\n      }\n    }\n\n    if (args.update) {\n      await util.promisify(fs.writeFile)(\n        versionFn,\n        JSON5.stringify(data, null, \"  \")\n      )\n    }\n\n    return 0\n  }\n}\n"]}